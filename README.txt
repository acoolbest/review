1、自我介绍

本科毕业后做了2年嵌入式开发和3年的Linux平台的c/c++开发
做嵌入式开发期间，从无到有地做出了录音对讲机系列产品和列车调度对讲机的数字化系列产品，攻克了很多技术难点（因为是新项目，网上缺少解决问题的办法，文件系统移植、循环存储播放），也提出了很多解决问题的新方法（树形目录存储），并因此成为了项目经理，带领同事完善录音和列调系列产品。

后来3年主要从事Linux平台上手机充电服务软件的开发：
主要做的是客户端软件的开发，但项目中也有少部分服务端程序的开发（握手，心跳，断线重连）
项目主要用到了网络编程（http，ftp，dns），多进程多线程编程，跨平台交叉编译等技术；

在16年的时候，我们项目组与公司签了军令状，进行为期3个月的代码重构，经过大家通力合作，最后我们提前完成了项目，而且项目上线后非常稳定，为此还拿到了项目奖金。

后来我们需要做音视频相关的一个投屏项目，我们找了Android直播推流的demo，用Nginx+rtmp模块搭建了流媒体服务器，调研了ffmpeg，基本通读了ffplay源码，根据需求定制了一个流媒体播放器，并使用soundtouch开源库对音频进行二次处理

再后我们需要做即时通讯，我们调研了teamtalk，在局域网搭建了一套，并分析了teamtalk的代码架构，对分布式服务端有了一个更好的了解

TTServer主要包含了以下几种服务器:
LoginServer (C++): 登录服务器，分配一个负载小的MsgServer给客户端使用
MsgServer (C++): ?消息服务器，提供客户端大部分信令处理功能，包括私人聊天、群组聊天等
RouteServer (C++): ?路由服务器，为登录在不同MsgServer的用户提供消息转发功能
FileServer (C++): 文件服务器，提供客户端之间得文件传输服务，支持在线以及离线文件传输
MsfsServer (C++): 图片存储服务器，提供头像，图片传输中的图片存储服务
DBProxy (JAVA): 数据库代理服务器，提供mysql以及redis的访问服务，屏蔽其他服务器与mysql与redis的直接交互

技术是一直在革新的，但学习的脚步并没有停下

因为公司战略调整的原因，目前我正在找c++开发的相关职位，还请老师们多少指教，谢谢！

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

2、c++基础
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1、封装继承多态
https://blog.csdn.net/u013706540/article/details/82183670
https://blog.csdn.net/uestclr/article/details/51553978

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2、C++重写（覆盖）、重载、重定义、多态？
https://www.cnblogs.com/DannyShi/p/4593735.html

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
3、C语言能不能重载？
C语言不能重载，但可以使用“可变参数”或“函数指针”或“宏和预处理”来实现重载

https://blog.csdn.net/gatieme/article/details/50921577
https://blog.csdn.net/Wan_shibugong/article/details/80740849

只能靠参数而不能靠返回值类型的不同来区分重载函数
C++同名参数不同的函数编译完函数名称不同，所以可以函数重载。 

C语言不支持函数重载，C语言不能函数重载与函数编译后函数名有关
C语言编译后的代码名称为”_函数名”，编译后函数名变化只是在原来的函数名前加了一个下划线，所以当同名的函数参数不同时，编译器无法解析到他们的不同，因为它们编译后的名称都相同，所以C语言不能函数重载。

但是，利用可变参数可以实现 C 语言的函数重载的，POSIX 接口中定义的 open 函数就是一个非常好的

#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>

int open(const char *pathname, int flags);
int open(const char *pathname, int flags, mode_t mode);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
栈变量，全局变量，静态变量的区别，内存中的位置
https://blog.csdn.net/wcybrain/article/details/53320644
https://blog.csdn.net/nothingjff/article/details/83298923
栈（stack）：由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。

堆（heap） ：一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回收 。注意它与数据结构中的堆是两回事，分配方式倒是类似于链表。malloc和new等操作实际上就是在堆中申请内存，对象使用完后要手动释放，否则只能等待程序结束时由系统回收，会产生内存泄漏。

全局区（静态区）（static）：全局变量和静态变量是存储在一起的，初始化过的全局变量和静态变量在同一块区域，未初始化的全局变量和静态变量存放在一块相邻的区域内。此区域由系统在程序结束后释放。

文字常量区：常量字符串存放于此，在程序结束后由系统释放。字符常量就是像这样的 char* str=”abc”;其中的”abc”。在实际情况中，是会复用的，比如变量a和b都赋值为”abc”则实际上他们指向同一块地址。

程序代码区：存放函数体的二进制代码。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
虚拟地址、逻辑地址定义和区别
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
进程与线程的区别
https://www.cnblogs.com/fuchongjundream/p/3829508.html
在寄存器和堆栈上的区别，协程的实現，异步和同步编程
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
什么时候适合用多线程什么时候适合用多进程
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
一个消费者线程一个生产者线程如果不加锁访问同一缓冲区该怎么编程？

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
select和epoll

I/O多路复用的实现原理

epoll的高效就在于，当我们调用epoll_ctl往里塞入百万个句柄时，epoll_wait仍然可以飞快的返回，并有效的将发生事件的句柄给我们用户。这是由于我们在调用epoll_create时，内核除了帮我们在epoll文件系统里建了个file结点，在内核cache里建了个红黑树用于存储以后epoll_ctl传来的socket外，还会再建立一个list链表，用于存储准备就绪的事件，当epoll_wait调用时，仅仅观察这个list链表里有没有数据即可。有数据就返回，没有数据就sleep，等到timeout时间到后即使链表没数据也返回。所以，epoll_wait非常高效。
传统的select/poll另一个致命弱点就是当你拥有一个很大的socket集合，不过由于网络延时，任一时间只有部分的socket是“活跃”的，但是select/poll每次调用都会线性扫描全部的集合，导致效率呈现线性下降。但是epoll不存在这个问题，它只会对“活跃”的socket进行操作---这是因为在内核实现中epoll是根据每个fd上面的callback函数实现的。那么，只有“活跃”的socket才会主动的去调用 callback函数，其他idle状态socket则不会。
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
二叉树的前序非递归遍历
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
一个链表的翻转
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
设计一个读写锁，写四个函数，要求读写互斥，写写互斥
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
熟悉的linux命令，关于系统状态的命令
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
怎么查看一个目录下文件的总大小
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
怎么将一个文件中某一字符串替换成另一个
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
socket服务端客服端通信过程以及服务端如何处理多个客服端访问
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
虚函数实现机制，为什么能动态调用子类的重写方法
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
纯虚函数
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
一个类的成员能否是引用类型
https://blog.csdn.net/q_l_s/article/details/52400350
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
stl的包括哪些模板
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
gdb的基本命令
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
你知道的设计模式
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
100G大小的数据文件只有1G内存怎么排序（外部排序）？100G大小的文件找出TOP10最大的？100万条网络访问记录找出访问频率最高的前10条？判断一个单向链表是否有环？输出单向链表倒数第K个节点？如果写一个监控程序去监控日志文件（日志文件在不断更新），当出现error时进行报警，怎么写？
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
数据库索引原理（B+树）
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
聚集索引
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
TCP UDP 端口扫描 三次握手中 客户端和服务端主动链接关闭所处状态简述
TIME_WAIT 的 2MSL
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
守护进程
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
多进程之间通信方式
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Buffer 和cache
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
缓存命中和不命中
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CDN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
关于共享内存 mmap 映射文件
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Dcache
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
分布式存储解决方案
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
加密解密 加密算法
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
如何提升数据包在网络中的安全传输 安全性可靠性等
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
负载均衡
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
数据库的垂直拆分和水平拆分
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
HR面：
1. 自身缺点
2. 未来技术规划
3. 讲一讲你的项目和你的职责
4. 阿里百度腾讯同时给你发offer 你怎么考虑
5. 如果出现比阿里更高的薪水怎么选择
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
两个文件，里面各存有100亿条各32字节的url，只有4G内存，如何判断两个文件重复的url有哪些
1.布隆过滤器 2.分布式计算
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
设计文本文件的压缩算法
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
四层网络结构有哪些，每一层都是做什么用的，tcp与udp的区别
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
什么是析构函数，作用呢
虚析构函数的作用
父类的析构函数是否要设置成为虚函数
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
浅拷贝和深拷贝的区别？

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
如果一个函数传入一个对象，那么这是浅拷贝还是深拷贝？

标准答案应该是，如果使用的是引用或指针不会发生拷贝，如果传入的类没有实现拷贝构造函数则是浅拷贝，如果实现了拷贝构造函数则看实现的拷贝构造函数是浅拷贝还是深拷贝。
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C语言里的指针是什么

我回答是首先它是一个变量，里面存的是所指向的内部数据类型或对象的地址。取内容可以获得这个数据或对象。
实际上指针不一定是变量，也有常量指针，不过一般都说指针是指针变量的简称。所以上述表达没有什么问题。
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
形参实参的区别
形参指的是外部调用的时候传入的参数，实参是函数在处理内部所使用的参数
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
模拟退火算法
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
熵是什么，增大代表什么
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
分布式系统中，每台机器如何产生一个唯一的随机值
貌似和guid有关
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
高并发量秒杀活动的处理流程
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
TCP的拥塞控制、流量控制详细说明？
流量控制除了滑动窗口还有个速率控制，但是没说上来
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C语言编译器原理、语法分析
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
时间复杂度为O(n)的排序算法
桶排序。面试官说还有呢，我说不知道
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
时间复杂度为O(nlogn)的排序算法及其适用场景
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
I/O模型有哪些，每一个的适用场景
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
http1.0和http2.0的区别

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
http https的区别
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
实现一个c语言函数，先让理解这个函数的意思，然后完全实现
char *strtok(char s[], const char *delim)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
多个服务器通信，线程池的设定(这个问题问了好久，什么qps,响应时间都扯出来了)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
哈希表的冲突解决方式
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
哈希表在桶固定的情况下，时间复杂度。怎么优化
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
多线程中哈希表保证线程安全
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
哈希表特别大，桶特别多的时候怎么加锁
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C语言变量存放位置
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
栈上的分配内存快还是堆上快(我猜是栈？有大佬有标准答案吗)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
http的长连接和短连接是什么，各有什么优缺点，然后使用场景
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
在一个浏览器里面输入一个网址，后回车，在这后面发生了什么
http DNS 三次握手 arp rarp ...
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
问了一下数据库索引失效的情况
给了几个联合索引的判断
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
数据库乐观锁和悲观锁
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
介绍一下bean的生命周期
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
问了一下map的分类和常见的情况
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
快排的思想
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
讲讲为什么是三次握手，四次挥手
２次握手超时数据包会影响很大，三次握手容易遭到syc攻击，四次挥手很多情况下是三次(tcpdump抓）以及常见的粘包，数据包安全．滑动窗口
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
内存分布
堆．栈．常量区，静态区．。。。
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
讲讲虚函数
虚函数表，以及虚函数的内存布局，虚函数的局限，ｃ＋＋１１的提供的类似虚函数的新函数．两种动态多态实现的区别以及优缺点
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
类什么时候会析构
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ｃ＋＋解决内存泄漏方法 查内存泄露
valgrid
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
大区间求和
归并排序
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
linux系统的极限
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
怎么解决副本一致
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
分布式缓存怎么设计
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
配置中心怎么开发
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
考了个大数据去重，我说mapreduce和哈希。面试官想问bitmap
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c++协程实现，异步编程，泛型编程，共享内存的内部锁是什么
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
getpid()得到的是进程的pid，在内核中，每个线程都有自己的PID，要得到线程的PID,必须用syscall(SYS_gettid);
pthread_self函数获取的是线程ID，线程ID在某进程中是唯一的，在不同的进程中创建的线程可能出现ID值相同的情况。
https://www.cnblogs.com/lakeone/p/3789117.html
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
tcp/ip底层实现
https://blog.csdn.net/jinbusi_blog/article/details/73693039
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
socket实现tcp和udp的例子
https://blog.csdn.net/u012234115/article/details/54142273
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
进程在内存中的结构
https://blog.csdn.net/jason_cuijiahui/article/details/82632325
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
关于同步、异步与阻塞、非阻塞的理解
https://www.cnblogs.com/Anker/p/5965654.html
https://www.cnblogs.com/akaneblog/p/6864262.html
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
讲解一下进程的调度机制（我讲了其他调度算法的缺点，重点讲了CFS的调度过程，面试官说你没读过内核源码，理解得不够深刻） 
https://blog.csdn.net/zhaqiwen/article/details/7763678
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
GDB多线程程序如何调试
https://www.cnblogs.com/lsgxeva/p/8078670.html
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C语言的调库
https://blog.csdn.net/shaosunrise/article/details/81161064
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
内存分配机制
https://www.cnblogs.com/yiluyisha/p/9049011.html
用c语言实现虚函数机制
https://blog.csdn.net/Watson2016/article/details/68937074
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
io复用 select、poll、epoll之间的区别总结
https://blog.csdn.net/hacker00011000/article/details/52160590
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
进程和线程的区别
https://www.cnblogs.com/zhehan54/p/6130030.html
进程是资源分配的最小单位，线程是程序执行的最小单位。

进程有自己的独立地址空间，每启动一个进程，系统就会为它分配地址空间，建立数据表来维护代码段、堆栈段和数据段，这种操作非常昂贵。而线程是共享进程中的数据的，使用相同的地址空间，因此CPU切换一个线程的花费远比进程要小很多，同时创建一个线程的开销也比进程要小很多。

线程之间的通信更方便，同一进程下的线程共享全局变量、静态变量等数据，而进程之间的通信需要以通信的方式（IPC)进行。不过如何处理好同步与互斥是编写多线程程序的难点。

但是多进程程序更健壮，多线程程序只要有一个线程死掉，整个进程也死掉了，而一个进程死掉并不会对另外一个进程造成影响，因为进程有自己独立的地址空间。
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
给你两台主机192.168.1.2与192.168.2.2，一个网关，怎样配置三层转发拓扑
Linux ping网关会产生几个包
路由表和三层转发（ping过程）详解（TCP/IP）
https://www.cnblogs.com/skyfsm/p/6348040.html?utm_source=itdadao&utm_medium=referral
https://blog.csdn.net/u012503786/article/details/78657896
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c++容器和迭代器
https://blog.csdn.net/u013719339/article/details/80615217
https://blog.csdn.net/summerxiachen/article/details/59538640
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
MySQL的四种事务隔离级别
https://www.cnblogs.com/huanongying/p/7021555.html
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ip私有地址
https://baike.baidu.com/item/%E7%A7%81%E6%9C%89%E5%9C%B0%E5%9D%80/727338?fr=aladdin
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
堆排序、快速排序、插入排序
https://blog.csdn.net/pilipilipan/article/details/79702298
https://blog.csdn.net/zcyzsy/article/details/52761283
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
tcp的保活机制
https://blog.csdn.net/qq_32446743/article/details/82743863
https://blog.csdn.net/u010853261/article/details/82253948
https://blog.csdn.net/wan_hust/article/details/25835025
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
指针和引用的区别
类型转换的区别
赋值构造函数和拷贝构造函数的区别
虚函数表、虚函数、纯虚函数
new delete malloc free
c++调用C语言：extern "C"
smart_ptr unique_ptr 区别和适用场景
各种STL容器的原理，时间复杂度，适用场景
构造函数调用virtual函数会怎样？
构造析构顺序
排序，树的遍历，string的深浅复制，模板类，单例，工厂，图的遍历